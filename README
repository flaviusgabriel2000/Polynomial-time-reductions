// Polynomial-time reductions

                        IMPLEMENTATION

1. RETELE   - For this problem, I decided to implement the recommended reduction,
	      namely k-clique <=P SAT. After the problem data is read from stdin, the graph of
	      the current instance is built. Further, to build the sat.cnf file necessary for
	      the Oracle, I created a list containing O(nk) variables coded with values starting
	      from 1. Then, after applying the constraints of the k-clique problem, O(nk^2) clauses
	      are generated. All these clauses are introduced in the mentioned file that will be
	      passed on to the Oracle. The decoding of the result and its interpretation, as well
	      as other details related to the implementation, are specified through comments in
	      the source code.


2. RECLAME  - For this problem, I chose to apply the same reduction from the previous problem,
	      namely k-clique <=P SAT, but this time we will apply it to the graph transposed
	      to the initial one (the edges that do not exist in the initial graph will be edges
	      in this graph). Since it is the same reduction, O(nk) variables and O(nk^2) clauses
	      are introduced that will be transmitted to the Oracle. Following its response,
	      the vertices that form the extended group of people are decoded and obtained.
	      We need the essential group, and this is obtained by taking the other vertices
	      of the graph.

3. REGISTRE - Register allocation is a real- world problem, often associated with the graph
	      coloring problem. Thus, I decided to perform the k-coloring <=P SAT reduction.
	      Similar to the previous task, after the problem data is read from stdin, the
	      graph of the current instance is constructed with its help. Also, O(nk) variables
	      are introduced that are coded starting with 1 and O(nk^2) clauses after the problem
	      constraints are applied. This time, the interpretation of the Oracle's response
	      differs from the previous task and is specified in the comments in the code.


	The implementation of the graph data structure is in the Graph class. It contains
classical methods for operations on this structure, which serve to solve the tasks of the
topic. Reading from stdin and from the file, respectively displaying on stdout and writing
to the file is done with BufferedReader and BufferedWriter.